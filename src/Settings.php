<?php
namespace UmutPHP\WPVulnerabilityCheck;

use Symfony\Component\Yaml\Yaml;
use Symfony\Component\Yaml\Exception\ParseException;
class Settings
{
    /**
     * Full path of the config file
     * @var string|null
     */
    public $config = null;

    /**
     * Full path of the installation to check
     * @var string
     */
    public $path = '.';

    /**
     * Full path of the plugin directory to check
     * @var string
     */
    public $plugins = 'wp-content' . DIRECTORY_SEPARATOR . 'plugins';

    /**
     * Full path of the mu plugin directory to check
     * @var string
     */
    public $MUPlugins = 'wp-content' . DIRECTORY_SEPARATOR . 'mu-plugins';

    /**
     * Full path of the themes directory to check
     * @var string
     */
    public $themes = 'wp-content' . DIRECTORY_SEPARATOR . 'themes';

    /**
     * Dont't check files or directories
     * @var array
     */
    public $excluded = array();

    /**
     * Use colors in console output
     * @var bool
     */
    public $colors = true;

    /**
     * Format of console output
     * @var string
     */
    public $output = 'NO';

    /**
     * The API Token taken from the wpscan.com site to use API.
     * @var bool
     */
    public $token = 'NO_TOKEN';
    /**
     * @param array $arguments
     * @return Settings
     * @throws Exception\InvalidArgument
     */
    public static function parseArguments(array $arguments)
    {
        $arguments       = new ArrayIterator(array_slice($arguments, 1));
        $setting         = new self;

        // Check if the config file is given.
        foreach ($arguments as $argument) {
            switch ($argument) {
                case '--config':
                    $setting->config = trim($arguments->getNext());
                    break;
                default:
                    break;
            }
        }

        if ($setting->config !== null) {
            if (!file_exists($setting->config)) {
                throw new \Exception("The config file (" . $setting->config . ") given does not exists.");
            }

            try {
                $values = Yaml::parseFile($setting->config);
                foreach ($values as $key => $value) {
                    if(property_exists($setting, $key)){
                        $setting->{$key} = $value;
                    }
                }
            } catch (ParseException $exception) {
                throw new \Exception('Unable to parse the YAML string: %s', $exception->getMessage());
            }
        }

        foreach ($arguments as $argument) {
            if ($argument[0] !== '-') {
                throw new \Exception("Invalid argument $argument");
            } else {
                switch ($argument) {
                    case '--path':
                        $setting->path = trim($arguments->getNext());
                        break;
                    case '--plugins-path':
                        $setting->plugins = trim($arguments->getNext());
                        break;
                    case '--mu-plugins-path':
                        $setting->MUPlugins = trim($arguments->getNext());
                        break;
                    case '--themes-path':
                        $setting->themes = trim($arguments->getNext());
                        break;
                    case '--token':
                        $setting->token = trim($arguments->getNext());
                        break;
                    case '--exclude':
                        $setting->excluded = explode(',', $arguments->getNext());
                        break;
                    case '--output':
                        $setting->output = trim($arguments->getNext());
                        break;
                    case '--no-colors':
                        $setting->colors = false;
                        break;
                    case '--config':
                        $arguments->getNext();
                        break;
                    default:
                        throw new \Exception("Invalid argument $argument");
                }
            }
        }

        $setting = self::setDefaults($setting);

        return $setting;
    }

   /**
    * @param Settings $setting
    * @return Settings $setting
    */
    public static function setDefaults(Settings $setting)
    {
        $setting->plugins   = $setting->path . DIRECTORY_SEPARATOR . $setting->plugins;
        $setting->MUPlugins = $setting->path . DIRECTORY_SEPARATOR . $setting->MUPlugins;
        $setting->themes    = $setting->path . DIRECTORY_SEPARATOR . $setting->themes;

        return $setting;
    }
}
